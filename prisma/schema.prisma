// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid())
  username    String
  fullname    String
  email       String     @unique
  password    String
  role        UserRole
  phonenumber String
  address     String
  province    String
  city        String
  avatar      String? // profile picture
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  favorites   Favorite[] @relation("UserFavorites")
  favoritedBy Favorite[] @relation("FavoritedBy")

  // Relations
  jobs          Job[]          @relation("ProviderJobs")
  applications  Application[]  @relation("SeekerApplications")
  chats         Chat[]         @relation("UserChats")
  reviews       Review[]       @relation("UserReviews")
  notifications Notification[]
  Message       Message[]
}

enum UserRole {
  jobseeker
  jobprovider
}

model Favorite {
  userId     String
  favoriteId String

  user     User @relation("UserFavorites", fields: [userId], references: [id])
  favorite User @relation("FavoritedBy", fields: [favoriteId], references: [id])

  @@id([userId, favoriteId])
}

model Job {
  id          String    @id @default(uuid())
  title       String
  description String
  categories  String[] // Array of categories
  location    String
  minRate     Float?
  maxRate     Float?
  rateType    String? // hourly, daily, etc.
  status      JobStatus @default(open)
  provider    User      @relation("ProviderJobs", fields: [providerId], references: [id])
  providerId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dateTime    DateTime // Add this line

  // Relations
  applications Application[]
  reviews      Review[]      @relation("JobReviews")
  chats        Chat[]        @relation("JobChats")
}

enum JobStatus {
  open
  closed // belum dimulai
  inprogress // sedang dikerjakan
  completed
}

model Application {
  id              String            @id @default(uuid())
  name            String
  description     String
  skillLevel      SkillLevel
  workload        Workload
  dailyDuration   DailyDuration
  rateType        RateType
  minRate         Float
  maxRate         Float
  tags            String[]
  job             Job?              @relation(fields: [jobId], references: [id])
  jobId           String?
  seeker          User              @relation("SeekerApplications", fields: [seekerId], references: [id])
  seekerId        String
  status          ApplicationStatus @default(pending)
  cvFile          String? // file path or URL
  portfolioLinks  String?
  additionalNotes String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  chats           Chat[]            @relation("ApplicationChats")
}

enum ApplicationStatus {
  pending
  sent
  onnegotiation
  accepted
  rejected
  withdrawn
}

enum SkillLevel {
  pemula
  menengah
  profesional
}

enum Workload {
  pekerjaan_kecil
  pekerjaan_sedang
  pekerjaan_besar
}

enum DailyDuration {
  THREE_HOURS  @map("3")
  THREE_TO_SIX @map("3-6")
  SIX_HOURS    @map("6")
}

enum RateType {
  hourly
  daily
}

model Chat {
  id            String      @id @default(uuid())
  participants  User[]      @relation("UserChats")
  job           Job         @relation("JobChats", fields: [jobId], references: [id])
  jobId         String
  application   Application @relation("ApplicationChats", fields: [applicationId], references: [id])
  applicationId String
  messages      Message[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Message {
  id       String   @id @default(uuid())
  chat     Chat     @relation(fields: [chatId], references: [id])
  chatId   String
  sender   User     @relation(fields: [senderId], references: [id])
  senderId String
  content  String
  sentAt   DateTime @default(now())
  isRead   Boolean  @default(false)
}

model Review {
  id         String   @id @default(uuid())
  job        Job      @relation("JobReviews", fields: [jobId], references: [id])
  jobId      String
  user       User     @relation("UserReviews", fields: [userId], references: [id])
  userId     String
  rating     Int
  reviewText String
  createdAt  DateTime @default(now())
}

model Notification {
  id      String   @id @default(uuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  message String
  date    DateTime @default(now())
  isRead  Boolean  @default(false)
}
